package com.pdl.bussys.ostservice.config;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import com.github.benmanes.caffeine.cache.Expiry;
import com.pdl.bussys.ostservice.model.brand.dto.StoreByBrandDto;
import org.checkerframework.checker.index.qual.NonNegative;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.caffeine.CaffeineCache;
import org.springframework.cache.support.SimpleCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import static com.pdl.bussys.ostservice.constant.IntegerConstants.CACHE_INITIAL_CAPACITY;
import static com.pdl.bussys.ostservice.constant.IntegerConstants.CACHE_MAXIMUM_SIZE;
import static com.pdl.bussys.ostservice.constant.IntegerConstants.STORES_BY_BRANDS_SECONDS_EXPIRE;
import static com.pdl.bussys.ostservice.constant.ServiceConstants.STORES_BY_BRAND_CACHE_NAME;
import static com.pdl.bussys.ostservice.constant.ServiceConstants.CATALOG_CACHE_NAME;
import static com.pdl.bussys.ostservice.constant.ServiceConstants.CHECK_FIVE;

@Configuration
@EnableCaching
public class CacheConfig {

    @Bean
    public CacheManager cacheManager() {
        CaffeineCache catalogCache = buildCatalogCache(CATALOG_CACHE_NAME, STORES_BY_BRANDS_SECONDS_EXPIRE.getNumber());
        CaffeineCache storeByBrandCache = buildStoresByBrandCache(STORES_BY_BRAND_CACHE_NAME, STORES_BY_BRANDS_SECONDS_EXPIRE.getNumber());
        CaffeineCache validateStoreBrand = validateStoreBrand("validateStoreBrandCache");
        SimpleCacheManager manager = new SimpleCacheManager();
        manager.setCaches(Arrays.asList(catalogCache, storeByBrandCache, validateStoreBrand));
        return manager;
    }

    private CaffeineCache buildCatalogCache(String name, int secondsToExpire) {
        return new CaffeineCache(name, Caffeine.newBuilder()
                .initialCapacity(CACHE_INITIAL_CAPACITY.getNumber())
                .maximumSize(CACHE_MAXIMUM_SIZE.getNumber())
                .expireAfterWrite(secondsToExpire, TimeUnit.SECONDS)
                .recordStats()
                .build());
    }

    private CaffeineCache buildStoresByBrandCache(String name, int secondsToExpire) {
        return new CaffeineCache(name, Caffeine.newBuilder()
                .initialCapacity(CACHE_INITIAL_CAPACITY.getNumber())
                .maximumSize(CACHE_MAXIMUM_SIZE.getNumber())
                .expireAfterWrite(secondsToExpire, TimeUnit.SECONDS)
                .recordStats()
                .build());
    }

    private CaffeineCache validateStoreBrand(String name) {
        return new CaffeineCache(name, validateStoreBrandCache);
    }

    Cache validateStoreBrandCache = Caffeine.newBuilder().expireAfter(new Expiry<String, HashMap<String, StoreByBrandDto>>() {
        @Override
        public long expireAfterCreate(String key, HashMap<String, StoreByBrandDto> value, long currentTime) {
            return TimeUnit.MINUTES.convert(Duration.ofMinutes(CHECK_FIVE));
        }

        @Override
        public long expireAfterUpdate(String key, HashMap<String, StoreByBrandDto> value, long currentTime,
                                      @NonNegative long currentDuration) {
            return currentDuration;
        }

        @Override
        public long expireAfterRead(String key, HashMap<String, StoreByBrandDto> value, long currentTime,
                                    @NonNegative long currentDuration) {
            return currentDuration;
        }

    }).build();

}
